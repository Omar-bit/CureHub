// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User roles enum
enum UserRole {
  DOCTOR
  ASSISTANT
  PATIENT
}

// User model for authentication
model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  password                String
  role                    UserRole  @default(PATIENT)
  firstName               String?
  lastName                String?
  phone                   String?
  isActive                Boolean   @default(true)
  isEmailVerified         Boolean   @default(false)
  emailVerificationCode   String?
  emailVerificationExpiry DateTime?
  language                String    @default("en")
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  // Relations
  doctorProfile DoctorProfile?

  @@map("users")
}

// Doctor profile for professional settings and preferences
model DoctorProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Professional Information
  specialization  String?
  bio             String? @db.Text
  profileImageUrl String?

  // Practice Information
  clinicAddress String? @db.Text
  clinicPhone   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  patients          Patient[]
  consultationTypes DoctorConsultationType[]
  timeplans         DoctorTimeplan[]
  appointments      Appointment[]
  tasks             Task[]
  events            Event[]

  @@map("doctor_profiles")
}

// Gender enum for patients
enum Gender {
  MALE
  FEMALE
  OTHER
}

// Consultation location enum
enum ConsultationLocation {
  ONSITE
  ONLINE
  ATHOME
}

// Consultation type enum
enum ConsultationType {
  REGULAR
  URGENT
}

// Patient model managed by doctors
model Patient {
  id           String   @id @default(cuid())
  name         String
  dateOfBirth  DateTime
  profileImage String?
  gender       Gender
  email        String?
  password     String?
  phoneNumber  String?
  address      String?  @db.Text
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  doctorId     String
  doctor       DoctorProfile @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  tasks        Task[]

  @@map("patients")
}

// Consultation Type model for doctors to define their consultation offerings
model DoctorConsultationType {
  id            String               @id @default(cuid())
  name          String
  color         String // Hex color code for UI display
  location      ConsultationLocation
  duration      Int // Duration in minutes
  restAfter     Int // Rest time after consultation in minutes
  type          ConsultationType
  canBookBefore Int // How many minutes before consultation can be booked
  price         Float // Price in the doctor's currency
  enabled       Boolean              @default(true)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt

  // Relations
  doctorId String
  doctor   DoctorProfile @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  // Timeplan relations
  timeSlotConsultationTypes TimeSlotConsultationType[]
  appointments              Appointment[]

  @@map("doctor_consultation_types")
}

// Enum for days of the week
enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

// Doctor's weekly timeplan configuration
model DoctorTimeplan {
  id        String        @id @default(cuid())
  doctorId  String
  doctor    DoctorProfile @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  dayOfWeek DayOfWeek
  isActive  Boolean       @default(true) // Allow doctors to temporarily disable a day
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  timeSlots DoctorTimeSlot[]

  @@unique([doctorId, dayOfWeek]) // One timeplan per doctor per day
  @@map("doctor_timeplans")
}

// Individual time slots within a day
model DoctorTimeSlot {
  id         String         @id @default(cuid())
  timeplanId String
  timeplan   DoctorTimeplan @relation(fields: [timeplanId], references: [id], onDelete: Cascade)
  startTime  String // Format: "HH:mm" (e.g., "09:00")
  endTime    String // Format: "HH:mm" (e.g., "11:00")
  isActive   Boolean        @default(true)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  // Relations
  consultationTypes TimeSlotConsultationType[]

  @@map("doctor_time_slots")
}

// Junction table for associating consultation types with time slots
model TimeSlotConsultationType {
  id                 String                 @id @default(cuid())
  timeSlotId         String
  timeSlot           DoctorTimeSlot         @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)
  consultationTypeId String
  consultationType   DoctorConsultationType @relation(fields: [consultationTypeId], references: [id], onDelete: Cascade)
  createdAt          DateTime               @default(now())

  @@unique([timeSlotId, consultationTypeId]) // Prevent duplicate associations
  @@map("time_slot_consultation_types")
}

// Appointment status enum
enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

// Task priority enum
enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Task category enum  
enum TaskCategory {
  RENDEZ_VOUS // Appointments
  DOCUMENTS // Documents
  CONTACTER // Contact
  PAIEMENTS // Payments
  AUTRE // Other
}

// Event type enum
enum EventType {
  JOUR // Full day event
  PLAGE // Time range event
  PONCTUEL // Point in time event
}

// Appointment model for doctor-patient meetings
model Appointment {
  id          String            @id @default(cuid())
  title       String? // Optional appointment title
  description String?           @db.Text // Optional notes or description
  startTime   DateTime // Start date and time of the appointment
  endTime     DateTime // End date and time of the appointment
  status      AppointmentStatus @default(SCHEDULED)
  notes       String?           @db.Text // Doctor's notes about the appointment

  // Relations
  doctorId String
  doctor   DoctorProfile @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  patientId String
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  consultationTypeId String?
  consultationType   DoctorConsultationType? @relation(fields: [consultationTypeId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointments")
}

// Task model for doctor task management
model Task {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  deadline    DateTime? // Optional deadline
  priority    TaskPriority @default(MEDIUM)
  category    TaskCategory @default(AUTRE)
  completed   Boolean      @default(false)
  completedAt DateTime? // When the task was completed

  // Relations
  doctorId String
  doctor   DoctorProfile @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  patientId String?
  patient   Patient? @relation(fields: [patientId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tasks")
}

// Event model for doctor events management
model Event {
  id                String    @id @default(cuid())
  title             String
  description       String?   @db.Text
  eventType         EventType
  startDate         DateTime
  endDate           DateTime? // For PLAGE type events
  startTime         String? // Format: "HH:mm" for PLAGE and PONCTUEL types
  endTime           String? // Format: "HH:mm" for PLAGE type
  blockAppointments Boolean   @default(false) // Bloquer la prise de RDV
  isRecurring       Boolean   @default(false) // Évènement récurrent
  color             String? // Color for calendar display
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  doctorId String
  doctor   DoctorProfile @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@map("events")
}
