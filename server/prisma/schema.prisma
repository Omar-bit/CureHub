// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User roles enum
enum UserRole {
  DOCTOR
  ASSISTANT
  PATIENT
}

// User model for authentication
model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  password                String
  role                    UserRole  @default(PATIENT)
  firstName               String?
  lastName                String?
  phone                   String?
  isActive                Boolean   @default(true)
  isEmailVerified         Boolean   @default(false)
  emailVerificationCode   String?
  emailVerificationExpiry DateTime?
  language                String    @default("en")
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  // Relations
  doctorProfile DoctorProfile?

  @@map("users")
}

// Doctor profile for professional settings and preferences
model DoctorProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Professional Information
  specialization  String?
  bio             String? @db.Text
  profileImageUrl String?

  // Practice Information
  clinicAddress String? @db.Text
  clinicPhone   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  patients Patient[]

  @@map("doctor_profiles")
}

// Gender enum for patients
enum Gender {
  MALE
  FEMALE
  OTHER
}

// Patient model managed by doctors
model Patient {
  id           String   @id @default(cuid())
  name         String
  dateOfBirth  DateTime
  profileImage String?
  gender       Gender
  email        String?  @unique
  password     String?
  phoneNumber  String?
  address      String?  @db.Text
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  doctorId String
  doctor   DoctorProfile @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@map("patients")
}
